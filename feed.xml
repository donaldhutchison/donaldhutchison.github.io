<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Donald Hutchison</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2014-10-19T14:30:12+02:00</updated>
<id>/</id>
<author>
  <name>Donald Hutchison</name>
  <uri>/</uri>
  <email>contact@donaldhutchison.info</email>
</author>


  

<entry>
  <title type="html"><![CDATA[How to write a bug report]]></title>
  <link rel="alternate" type="text/html" href="/articles/how-to-write-bug-reports/" />
  <id>/articles/how-to-write-bug-reports</id>
  <published>2014-02-17T00:00:00+01:00</published>
  <updated>2014-02-17T00:00:00+01:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#whats-a-bug-report&quot;&gt;What’s a bug report&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-should-be-in-a-bug-report&quot;&gt;What should be in a bug report&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#an-example-bug-report&quot;&gt;An example bug report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is a post I created for internal distribution when writing bug reports for mobile applications. I’m sharing it here because I think it’s useful for future situations.&lt;/p&gt;

&lt;h2 id=&quot;whats-a-bug-report&quot;&gt;What’s a bug report&lt;/h2&gt;

&lt;p&gt;Bug reports exist only to inform people about software defects. They are not for notes, for tracking work done or for planning. There are better systems for this. The best bug reports will have as much appropriate information as possible to help asses get kicked as fast and effectively as possible.&lt;/p&gt;

&lt;p&gt;Including the correct information in a bug report will help the problem to be discovered, diagnosed and solved in a timely manner - without this information, more questions will be needed before an attempt can be made at trying to fix whatever went wrong.&lt;/p&gt;

&lt;h2 id=&quot;what-should-be-in-a-bug-report&quot;&gt;What should be in a bug report&lt;/h2&gt;

&lt;h3 id=&quot;steps-to-reproduce&quot;&gt;Steps to reproduce&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;most&lt;/em&gt; important thing in a bug report is &lt;em&gt;reproduction steps&lt;/em&gt;. This means a short description of what you did to make things go wrong. The best version of this will include only the steps necessary to recreate the defect. By following this, a developer should be able to come across the same problem as was reported by the tester / user. If the problem isn’t always reproducible, a rough estimate of how often the problem occurs would be helpful in keeping sanity in check..&lt;/p&gt;

&lt;p&gt;This is useful not only in helping locate the issue, but can be used to identify duplicates or related issues.&lt;/p&gt;

&lt;h3 id=&quot;version--device-information&quot;&gt;Version / Device information&lt;/h3&gt;
&lt;p&gt;A listing of the artifact version and device used when the defect was encountered will help pinpoint where the problem lies and when it was released. It is also very helpful when trying to reproduce the problem in the same situation as it was discovered. Without this info, there is no way of really knowing if the problem has already been fixed or tracking it’s lifetime.&lt;/p&gt;

&lt;h3 id=&quot;tester-assumptions--expectations&quot;&gt;Tester assumptions / expectations&lt;/h3&gt;
&lt;p&gt;Next, a listing of the results that the tester had in mind when encountering the problem can be used to help assess the validity of the problem. This is usually in the form of “Expected Results” and “Actual Results”, i.e. “I &lt;em&gt;expected&lt;/em&gt; the items in the well to increase when tapping on the resource icon, but what &lt;em&gt;actually&lt;/em&gt; happened was that the application didn’t respond to the input.”&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;A very short and concise summary is great. Try and balance it between being as short as possible and as specific as possible. “Graphical Issues in UI” is pretty bad, but there have been worse. “UI distorted in Contact View with German locale” is great.&lt;/p&gt;

&lt;h3 id=&quot;other-awesome-things&quot;&gt;Other awesome things&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Screenshots - if it’s a UI based issue or something that can only really be seen, screenshots are awesome&lt;/li&gt;
  &lt;li&gt;Related Issues - if there are existing bugs that have a similar scope, linking against them will be useful in finding the severity of the issue.&lt;/li&gt;
  &lt;li&gt;Logs / Crash Dumps / Stack Traces - if you have related logs, please attach them to your ticket. Everyone will love you for it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;an-example-bug-report&quot;&gt;An example bug report&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Items are uncollectable on far left of screen

If you try to touch something on the left edge of the screen &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a resource or collectable item&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, the touch seems to be registered in the wrong place and the item cannot be collected.

To Reproduce:  
1. Start harvesting something on the left edge of the map &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;in an explored area&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
2. Move the screen so that the object is just barely contained within the viewport  
3. Try to tap on the item  

Expected:  
You can collect the stuff, and the functionality works as &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; it was touched in regular circumstances.

Actual:  
The wrong functionality is invoked. In the above &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; an &lt;span class=&quot;s2&quot;&gt;&amp;quot;Explore Area&amp;quot;&lt;/span&gt; popup is usually shown, as &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; an expansion had been tapped instead of a resource.

Incidence:  
Happens about &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; out of &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;times&lt;/span&gt;

Tested on:  
* Snapshot &lt;span class=&quot;c&quot;&gt;#2874&lt;/span&gt;
* iphone5 running ios 6.1.4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/how-to-write-bug-reports/&quot;&gt;How to write a bug report&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on February 17, 2014.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[CCNode Recursive Description]]></title>
  <link rel="alternate" type="text/html" href="/articles/ccnode-recursive-description/" />
  <id>/articles/ccnode-recursive-description</id>
  <published>2014-02-04T00:00:00+01:00</published>
  <updated>2014-02-04T00:00:00+01:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;p&gt;&lt;code&gt;recusiveDescription&lt;/code&gt; is a pretty cool method. It’s on each UIView, and when called it gives you a quick and dirty description of the current view hierarchy relative to that view. &lt;/p&gt;

&lt;p&gt;Usually you’d use this in the debugger, whilst on a breakpoint, to sanity check the positions and children of a view. This is a short gist that adds the same functionality to a CCNode subclass - the common subclass of most visual entities in a Cocos2d project.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/8801621.js&quot;&gt; &lt;/script&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/ccnode-recursive-description/&quot;&gt;CCNode Recursive Description&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on February 04, 2014.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Ruby Development in the Bar]]></title>
  <link rel="alternate" type="text/html" href="/articles/ruby-at-the-bar/" />
  <id>/articles/ruby-at-the-bar</id>
  <published>2014-02-02T00:00:00+01:00</published>
  <updated>2014-02-02T00:00:00+01:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;p&gt;For reasons I won’t get into, I found myself spending Christmas in Wick on the &lt;a href=&quot;http://goo.gl/maps/BBa7b&quot;&gt;north east tip of Scotland&lt;/a&gt;. This being the second time it’s occurred I was familiar with the quirks and isolation of this part of the world. One of the more upswinging things that happens is that every 26th December, there’s a charity raffle in the local Seaforth Club. This is where you buy some tickets, drink, win prizes and drink some more. &lt;/p&gt;

&lt;p&gt;Again, this being the second time I’ve attended, I had a grudge to bear after last years events - specifically I didn’t win anything and I felt pretty grumpy about it. &lt;em&gt;“2013 will be different!”&lt;/em&gt;, I said to myself as I prepared a full on tactical strike against my previous misfortune.&lt;/p&gt;

&lt;h2 id=&quot;tickets-everywhere&quot;&gt;Tickets everywhere&lt;/h2&gt;

&lt;p&gt;As you can see in the header image, I went and bought as many tickets as my conscience would allow. You buy 10 tickets at a time, and the numbers increase sequentially from the first. I made sure to buy them at different intervals so I didn’t end up with a completely contiguous series of numbers (I don’t know if this helped but it made me feel smart.) &lt;/p&gt;

&lt;p&gt;Now, the way the raffle works is that an announcer will read out a number over the PA system (say - “56724!!”), and everyone will have to frantically check through their tickets for the number and, if lucky, present the winning ticket. If you take too long, or the announcer doesn’t like you, a new number will be read out and you’ve lost your chance to claim a novelty stuffed dog or kitsch souvenir. If only there were some way I could automate this verification process… I could spend more time enjoying festive beverages and the Christmas atmosphere, rather than continually reading through the far too many sheets of paper I had.&lt;/p&gt;

&lt;h2 id=&quot;ruboto-ruby-for-android&quot;&gt;Ruboto! Ruby for Android!&lt;/h2&gt;

&lt;p&gt;Fortunately I get paid to make computer programs, and this kind of thing is totally possible (to the point of being almost trivial) so I was able to go for it. Sneaking outside to the smoking area (there’s no signal inside the building) I went out to search the Google Play store for mobile programming environments. &lt;/p&gt;

&lt;p&gt;I’ve previously experimented with these on device programming tools, but dismissed them due to their pretty impractical nature. Trying to do anything other than very basic alphanumeric text input on a smartphone is frustrating at the best of times, let alone anything with multiple brackets. But right now it seems like a prime use for such a thing, and after this experience I’m finding myself looking for other similar niche situations where I could be without access to a keyboard and need programming ability.&lt;/p&gt;

&lt;p&gt;I found the awesome &lt;a href=&quot;http://ruboto.org/&quot;&gt;Ruboto&lt;/a&gt; framework for Ruby. This was exactly what I needed - an android runtime for ruby with an IRB application. Nice.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;Now it’s pretty simple. All I need are a few methods to keep track of some ranges (defined by a block of tickets), who they belong to, and whether a specific number is within the range. This kind of thing is totally handled by the standard lib, &lt;a href=&quot;http://www.ruby-doc.org/core-1.9.3/Range.html&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; is awesome. After a few too many beers I ended up with the following code jammed into my phone.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save_ranges&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@ranges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@ranges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@ranges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@ranges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;who_has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@ranges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_pair&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;person_ranges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@ranges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;person_ranges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ran&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ran&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;s2&quot;&gt;&amp;quot;noone has &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Very simple, but exactly what I needed. Short and concise. But even with this small scope I ran into a few issues whilst creating the above methods. First of all, what is the exact method called that you use to determine whether a specific number is included within a range? &lt;code&gt;include?&lt;/code&gt; or maybe &lt;code&gt;contains?&lt;/code&gt;??  &lt;/p&gt;

&lt;h3 id=&quot;some-stumbling&quot;&gt;Some Stumbling&lt;/h3&gt;

&lt;p&gt;I was in a situation where there was no 3G / GSM signal indoors, and Ruboto doesn’t come with Rdoc, so I used the dirty hack of &lt;code&gt;[1..2].methods - &quot;&quot;.methods&lt;/code&gt;. Typing this into iRB gives you a crude and dirty way of listing the exact methods attached to an object. The subtraction part is just a cheeky way of removing all the methods that exist on any subclass of &lt;code&gt;Object&lt;/code&gt;. Anyway, it turns out the method is called &lt;code&gt;member?&lt;/code&gt; - awesome.&lt;/p&gt;

&lt;p&gt;Another issue was the expected problem of data entry. Not only during development (switching between the symbolic keyboard and alphabetic on the stock android setup was a pain), but whilst using the application itself. I’d convinced everyone else at my table to use my program - in exchange for a drink - and got some genuine in field testing. By getting my sister to read out random ticket numbers (and throwing in some false numbers at the same time) I discovered that I’d considered a few pages of tickets to be consecutive, when they were quite disparate. Now I had to manually sort out my nested array / hash of ranges with the touchscreen. More effort into validation would have helped here, but the data set was small enough that I could fix everything in 10 minutes or so.&lt;/p&gt;

&lt;p&gt;I’d considered adding some basic serialization support but after my sister’s boyfriend bought the next round, I discovered I had more pressing matters to take care of.&lt;/p&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The Results!&lt;/h2&gt;

&lt;p&gt;Later the raffle started, and I got the chance to see if things would work out in my favour. The announcer read out a 5 digit number and waited for about 15 seconds. This is when you shout in excitement and run to the middle of the room with your ticket in order to claim your prize. After inputting everyone’s tickets, and then triply validating them with as much attention I could muster, it was simply a case of typing in the winning numbers as they were announced.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/ruby/input.png&quot;&gt;&lt;img src=&quot;/images/ruby/input.png&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/ruby/use.png&quot;&gt;&lt;img src=&quot;/images/ruby/use.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Data entry and usage!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It was quite a while before someone at my table got a winner. I was actually starting to get nervous that I hadn’t tested enough and everyone was missing out on novelty prizes due to my arrogance. Fortunately that wasn’t the case, and soon enough my sister got a winning ticket.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/ruby/kirstywin.png&quot;&gt;&lt;img src=&quot;/images/ruby/kirstywin.png&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/ruby/kirstyprize.jpg&quot;&gt;&lt;img src=&quot;/images/ruby/kirstyprize.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Kirsty wins a hat, a fanny pack and some D cell batteries!! Super jealous!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After putting in all this effort, I felt entitled to some kind of reward (aside from the drinks that I tricked everyone else out of). Perhaps it was the Christmas spirit(s), but soon I received all I was hoping for and more.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/ruby/iwin.png&quot;&gt;&lt;img src=&quot;/images/ruby/iwin.png&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/ruby/straighteners.jpg&quot;&gt;&lt;img src=&quot;/images/ruby/straighteners.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Hair stylers! Lucky number 72887 never fails&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Beautiful. Exactly what I was wanting. &lt;a href=&quot;/images/ruby/me.jpg&quot;&gt;Here&lt;/a&gt; is a recent photo of me, to show how much I appreciate and need such a styling product in my life. It was pretty funny :P&lt;/p&gt;

&lt;p&gt;The other prizes everyone got included a stuffed dog, a bottle of whisky, a large crate of cider and a stationary set. However, before setting out my mother had given me some money to buy tickets for her. This managing of other peoples’ tickets was one of the reasons I decided to solve this with a phone, and as such is the original cause behind this post. The final prize to be drawn was the star prize - a mystery sum of money in an envelope. Everyone in the room was ablaze with excitement and blazing. And what do you know, the winning ticket was in my possession.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/ruby/mumwin.png&quot;&gt;&lt;img src=&quot;/images/ruby/mumwin.png&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/ruby/mumprize1.jpg&quot;&gt;&lt;img src=&quot;/images/ruby/mumprize1.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Star Prize! ROI: &amp;gt;300%! Good deal!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The final number was detected by the program and now I have to pay my mother. The guys at the table opposite us were pretty annoyed at how much we’d won, and recommended I use the money to &lt;a href=&quot;http://goo.gl/maps/S3NJB&quot;&gt;“buy a one way ticket to inverness and don’t come back”&lt;/a&gt;. You guys are the best. Also at this point I’d aliased the &lt;code&gt;who_has&lt;/code&gt; method to simply &lt;code&gt;w&lt;/code&gt;, which I probably should have done a long time before.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Ruboto is pretty cool. This application was incredibly trivial and very specific to the situation I was in, but I question in what other similar situations I could create a short simple program to help me out. I feel the inherent nature of touch screens makes it difficult to input structured code, and as such would make anything pretty involving to be a frustrating experience - a topic brushed on by &lt;a href=&quot;http://www.codinghorror.com/blog/2010/10/the-keyboard-cult.html&quot;&gt;Jeff Atwood&lt;/a&gt; in an old post. Still, I want to keep my eyes open for another situation like this, and maybe come out with hair straighteners, whisky and £80 as a bonus for my initiative.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/ruby-at-the-bar/&quot;&gt;Ruby Development in the Bar&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on February 02, 2014.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Global Game Jam 2014]]></title>
  <link rel="alternate" type="text/html" href="/articles/global-game-jame2014/" />
  <id>/articles/global-game-jame2014</id>
  <published>2014-01-30T00:00:00+01:00</published>
  <updated>2014-01-30T00:00:00+01:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;p&gt;Last weekend was the &lt;a href=&quot;http://ggjberlin.de/&quot;&gt;Berlin Global Game Jam 2014&lt;/a&gt;. I’d made it part of a new years resolution plan to get more involved and release some games / projects, and this represented the first step towards doing something.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;http://globalgamejam.org/2014/games/damnhi&quot;&gt;awesome team&lt;/a&gt; and I worked all weekend making a twin stick style shooter in Unity. This was my first experience with Unity, and as such I spent most of the time watching tutorials and desparately deciphering the mysteries of Unity’s component / entity system. As such, I owe a lot to these guys for letting me hang around and break things. &lt;/p&gt;

&lt;p&gt;Unity is pretty cool, and I’m going to make a point of exploring it further for prototyping and short term projects. &lt;/p&gt;

&lt;p&gt;I really liked the game that we made, it’s pretty fun to play - silly and frantic. As a bonus we came 3rd place in the public vote for Berlin, which is just super neat. It’s definitely inspired me to be more active.&lt;/p&gt;

&lt;p&gt;Checkout the game at &lt;a href=&quot;http://globalgamejam.org/2014/games/damnhi&quot;&gt;the global game jam site&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/kA5JSRQ6UUQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;img src=&quot;/images/ggj.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/global-game-jame2014/&quot;&gt;Global Game Jam 2014&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on January 30, 2014.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Coffeescript + RequireJS Skeleton Project]]></title>
  <link rel="alternate" type="text/html" href="/articles/coffeescript-skeleton/" />
  <id>/articles/coffeescript-skeleton</id>
  <published>2014-01-10T00:00:00+01:00</published>
  <updated>2014-01-10T00:00:00+01:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;p&gt;After being introduced to the awesome &lt;a href=&quot;http://www.pixijs.com/&quot;&gt;pixi.js&lt;/a&gt; framework by a colleague, I decided to update an old project of mine to make screwing around with it a little easier. This &lt;a href=&quot;https://github.com/rkachowski/coffeescript-skeleton&quot;&gt;skeleton project&lt;/a&gt; comes with everything you need to run a pretty decent setup, and all at the cost of only two command line options.&lt;/p&gt;

&lt;h2 id=&quot;skeleton-project&quot;&gt;Skeleton Project!&lt;/h2&gt;
&lt;p&gt;The initial configuration is usually a pain for me, so I threw together an example project and some scripts to manage this. With this setup, I can clone a github repo, pass in some parameters to configure what is downloaded, and start hacking immediately :)&lt;/p&gt;

&lt;p&gt;The project comes with everything I usually want in a basic project. That is - &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;bootstrap&lt;/a&gt;, &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; and &lt;a href=&quot;http://coffeescript.org/&quot;&gt;Coffeescript&lt;/a&gt;. This is of course pretty heavyweight for a minimal application, but I like that I can start fleshing out some ideas in as little time as possible. &lt;/p&gt;

&lt;h2 id=&quot;use-me&quot;&gt;Use Me&lt;/h2&gt;

&lt;p&gt;To use the project, simply follow the handy dandy following instructions. I’m assuming that you have Python and Ruby installed, because I am writing this for myself and I know I do.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clone the repo &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/rkachowski/coffeescript-skeleton.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Choose a cool name for your new project&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into the directory, and run the setup command with your cool name &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rake setup&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;COOL_NAME_HERE&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Your project is generated! Now serve that sucker up with &lt;code&gt;rake run&lt;/code&gt; and check the badness at &lt;a href=&quot;http://127.0.0.1:8000&quot;&gt;http://127.0.0.1:8000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extras&quot;&gt;Extras&lt;/h2&gt;
&lt;p&gt;You can also include some optional libraries, and have them loaded into the default index.html file that comes with the project. Currently there is only support for &lt;a href=&quot;http://www.pixijs.com/&quot;&gt;pixi.js&lt;/a&gt; and &lt;a href=&quot;http://phaser.io/&quot;&gt;phaser.io&lt;/a&gt;. To get these, just define the appropriate environment variables before setup, e.g.
&lt;code&gt;PHASER=yes PIXI=yes rake setup[SuperAwesomeProject]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;One final thing is that the script is designed to self destruct it’s git repo after setup. This is so you can create a new project without having to worry about basing it on the git history of the skeleton. To prevent this behaviour, pass the &lt;code&gt;NORM=yes&lt;/code&gt; variable in the setup call (just like above).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rkachowski/coffeescript-skeleton&quot; class=&quot;btn&quot;&gt;Check it out on github!&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/coffeescript-skeleton/&quot;&gt;Coffeescript + RequireJS Skeleton Project&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on January 10, 2014.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Jekyll Migration Woes]]></title>
  <link rel="alternate" type="text/html" href="/articles/installing-jekyll-oh-lordy/" />
  <id>/articles/installing-jekyll-oh-lordy</id>
  <published>2013-07-18T00:00:00+02:00</published>
  <updated>2013-07-18T00:00:00+02:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;blockquote&gt;
  &lt;p&gt;(image from the awesome but short lived eponymous bbc series &lt;a href=&quot;http://www.imdb.com/title/tt0497298/&quot;&gt;Jekyll&lt;/a&gt; )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After getting sick of wordpress I decided to do the cool hipster thing and move my blog to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Both for the nerd credit and the super awesome minimal design (static site = no moving parts! awesome!). After reading about Josh Kaufman’s experience with Jekyll in his &lt;a href=&quot;http://first20hours.com/&quot;&gt;book&lt;/a&gt; it sounded like a pretty easy and maintainable platform to blog on.&lt;/p&gt;

&lt;h3 id=&quot;however&quot;&gt;However…&lt;/h3&gt;
&lt;p&gt;On the way I encountered a few issues that almost took the chill out of a refreshing Thursday night in Berlin. Here I recount my issues for the sake of future ventures.&lt;/p&gt;

&lt;h2 id=&quot;the-bad&quot;&gt;The Bad&lt;/h2&gt;

&lt;h3 id=&quot;wordpress-exporter--jekyll-import&quot;&gt;Wordpress Exporter / Jekyll Import&lt;/h3&gt;
&lt;p&gt;Wordpress comes with a library of a bajillion plugins you can install to pimp out the features available to you. One of the defaults is an export to xml feature. I’d imagine this is pretty good for the average case, but I had a heavily customised theme that I perhaps too rashly purchased off of an internet marketplace. &lt;/p&gt;

&lt;p&gt;Suffice it to say, jekyll’s default wordpress importer didn’t even try to change my posts. The formatting was all garbled and I had to manually edit each post to fit with the markdown syntax and change any previous gist embeds to use the cool jekyll version. Through fortune, I have not quite yet reached my maximum bloggin output (&lt;strong&gt;read:&lt;/strong&gt; I am chronically lazy ) and only had a few posts to deal with. This wasn’t too hard - most of it can be done with a combination of regex and vim.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-post-recieve-git-hook&quot;&gt;Jekyll post-recieve git hook&lt;/h3&gt;

&lt;p&gt;One of the coolest things for me was having a deploy process setup with git. The ability to write and preview everything locally, and then publish with a simple &lt;code&gt;git push&lt;/code&gt; was something I really wanted to have with my blog setup. There’s even an example hook you can use from &lt;a href=&quot;http://jekyllrb.com/docs/deployment-methods/&quot;&gt;jekyll’s documentation&lt;/a&gt;. Unfortunately I stumbled across a few hurdles whilst setting this up.&lt;/p&gt;

&lt;h4 id=&quot;rvm&quot;&gt;RVM&lt;/h4&gt;
&lt;p&gt;If you want to use the awesome &lt;a href=&quot;https://rvm.io/&quot;&gt;RVM&lt;/a&gt; then you need to hit one of your shell’s startup files to load it in. For me this was &lt;code&gt;bash&lt;/code&gt;. The example hooks run with the &lt;code&gt;#!/bin/sh&lt;/code&gt; shebang - this is not &lt;code&gt;bash&lt;/code&gt;.  &lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Make sure you have &lt;code&gt;#!/bin/bash&lt;/code&gt; at the top of your hook. You may need to run &lt;code&gt;#!/bin/bash -l&lt;/code&gt; if all your setup is done in &lt;code&gt;.bash_profile&lt;/code&gt;.  &lt;/p&gt;

&lt;h3 id=&quot;file-permissions&quot;&gt;File Permissions&lt;/h3&gt;

&lt;p&gt;This was just a result of my brain going on to autopilot, but make sure you create the folder you serve from with the correct user and permissions. In the hook this is &lt;code&gt;/var/www/myrepo&lt;/code&gt; - the deployment user needs to be able to write to this directory.&lt;/p&gt;

&lt;h3 id=&quot;locale-issues&quot;&gt;Locale Issues&lt;/h3&gt;

&lt;p&gt;This was fun. Suddenly everything seemed to work, but Jekyll would complain about scores and scores of invalid characters in my blog post. Specifically it was saying 
&lt;code&gt;/lib/jekyll/excerpt.rb:135:in &#39;scan&#39;: invalid byte sequence in US-ASCII (ArgumentError)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now this was weird, because I made pretty sure that all my files were encoded in UTF-8. After an hour or so of fighting and attempts at convincing the server that these files were in fact valid UTF-8 files, it turned out to be a locale issue. Running the &lt;code&gt;locale&lt;/code&gt; command from a terminal gave me this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;locale: Cannot &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;LC_CTYPE to default locale: No such file or directory
locale: Cannot &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;LC_ALL to default locale: No such file or directory
&lt;span class=&quot;nv&quot;&gt;LANG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US.UTF-8
&lt;span class=&quot;nv&quot;&gt;LANGUAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_CTYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;UTF-8
&lt;span class=&quot;nv&quot;&gt;LC_NUMERIC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_COLLATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_MONETARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_MESSAGES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_PAPER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_TELEPHONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_MEASUREMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_IDENTIFICATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahh, cool. My language isn’t set. Whatever. &lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Solution:&lt;/strong&gt; &lt;code&gt;LC_CTYPE=en_US.UTF-8 LANG=en_US.UTF-8 export LC_CTYPE LANG&lt;/code&gt; - throw this in the top of the git hook  &lt;/p&gt;

&lt;h2 id=&quot;and-then&quot;&gt;And then..&lt;/h2&gt;

&lt;p&gt;Peaches! everything seems to work fine. The sweet is never as sweet without the sour. &lt;/p&gt;

&lt;p&gt;The next thing to do was to setup a comment system with disqus, customise some header images and create a flattr account (heh). I look forward to overcoming my laziness and becoming the prolific and helpful tech blogger I know I never wanted to be.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/installing-jekyll-oh-lordy/&quot;&gt;Jekyll Migration Woes&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on July 18, 2013.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Robot Go Home : Gaiden]]></title>
  <link rel="alternate" type="text/html" href="/blog/working-title-robot-go-home-gaiden/" />
  <id>/blog/working-title-robot-go-home-gaiden</id>
  <published>2013-03-24T00:00:00+01:00</published>
  <updated>2013-03-24T00:00:00+01:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;p&gt;An iOS game prototype that was designed for the &lt;a href=&quot;http://www.onegameamonth.com/&quot;&gt;one game a month&lt;/a&gt; initiative.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Lesson Learned :&lt;/strong&gt; be fast but don’t rush..&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/blog/working-title-robot-go-home-gaiden/&quot;&gt;Robot Go Home : Gaiden&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on March 24, 2013.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Optimising CoffeeScript files with r.js - "Unexpected Character"]]></title>
  <link rel="alternate" type="text/html" href="/articles/optimising-coffeescript-files-with-r-js-unexpected-character/" />
  <id>/articles/optimising-coffeescript-files-with-r-js-unexpected-character</id>
  <published>2012-06-11T00:00:00+02:00</published>
  <updated>2012-06-11T00:00:00+02:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;h3 id=&quot;the-problem&quot;&gt;The Problem…&lt;/h3&gt;

&lt;p&gt;When trying to optimise a coffeescript project with the latest r.js optimiser from the requirejs npm module I ran into the following error:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Cannot uglify file: /path/to/main.js. Skipping it. Error is: Unexpected character &amp;#39;&amp;#39; (line: 363, col: 3, pos: 15612)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I downloaded the uglify-js package which r.js is using here to minify the script. Running it on the file in question in the output directory of the r.js build process gave me more information - specifically that uglify is dying on the character sequence &lt;strong&gt;ï»¿&lt;/strong&gt; - a utf-8 byte order mark.  &lt;/p&gt;

&lt;p&gt;It turns out these marks were being input by an incorrectly configured template in visual studio. After looking into it, it appears that the BOM isn’t necessary or even recommended in UTF-8 encoded files.  &lt;/p&gt;

&lt;h3 id=&quot;the-fix&quot;&gt;The Fix…&lt;/h3&gt;

&lt;p&gt;It follows that the quickest (and dirtiest) way is to simply strip these characters from files we wish to minify.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;grep -lZr $&amp;#39;\357\273\277&amp;#39; . | xargs -0 -l sed -i -e $&amp;#39;s/\357\273\277//g&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command is using the grep and sed commands (by way of xargs) to A) find all files containing the BOM and B) remove the mark from those files inplace.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;The call to grep has the options &lt;strong&gt;-lZr&lt;/strong&gt; set ( &lt;strong&gt;l&lt;/strong&gt; = only display filenames in the result, &lt;strong&gt;Z&lt;/strong&gt; = separate the results with \0, &lt;strong&gt;r&lt;/strong&gt; = search recursively from the path provided - in this case “.” ) which we pipe to xargs and call sed once for each filename. The scary looking &lt;strong&gt;$’\357\273\277’&lt;/strong&gt; is simply the &lt;strong&gt;ï»¿&lt;/strong&gt; escaped. We use the &lt;strong&gt;$&lt;/strong&gt; to get the shell to expand the escaped codes - otherwise grep and sed will interpret the escaped characters as a back reference to something already matched (which we don’t want).&lt;/p&gt;

&lt;p&gt;Because we’re using a simple shell script to invoke the r.js command, we can throw this command in there to do some preprocessing work on our source files. Ideally, this would be in a rake/make/cakefile but this fits my needs right now.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/optimising-coffeescript-files-with-r-js-unexpected-character/&quot;&gt;Optimising CoffeeScript files with r.js - "Unexpected Character"&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on June 11, 2012.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Coffeescript RequireJS and You!]]></title>
  <link rel="alternate" type="text/html" href="/articles/coffeescript-requirejs-and-you/" />
  <id>/articles/coffeescript-requirejs-and-you</id>
  <published>2012-04-24T00:00:00+02:00</published>
  <updated>2012-04-24T00:00:00+02:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#best-friends-together-at-last&quot;&gt;Best friends together at last!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#oh-no-save-me-requirejs&quot;&gt;Oh no save me, RequireJS!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lets-go&quot;&gt;Let’s Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;

&lt;/section&gt;

&lt;h2 id=&quot;best-friends-together-at-last&quot;&gt;Best friends together at last!&lt;/h2&gt;

&lt;p&gt;So you want to create a javascript application with some kind of non trivial complexity, but separating the functionality out into different script files gets hairy. You need to forward declare certain functions before you execute certain functions, and things need to be loaded before they can be displayed. &lt;/p&gt;

&lt;p&gt;Then when you add &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; into the mix you’ve got a whole new set of problems. Ultimately you want one big file containing the logic of your application, but unless you’ve passed your discrete &lt;i&gt;.coffee &lt;/i&gt;files to the coffee compiler (or included them in the head of your html) in a specific order, you won’t be able to execute functions before they’ve been declared. &lt;/p&gt;

&lt;h2 id=&quot;oh-no-save-me-requirejs&quot;&gt;Oh no save me, RequireJS!&lt;/h2&gt;

&lt;p&gt;What &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; does in this situation is provide a solution to the dependency problem mentioned above. What you do is create your separate script files to the &lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/AMD&quot;&gt;AMD&lt;/a&gt; format, which tells you to explicitly mention the files (modules) that each script file depends upon. You do this by wrapping your script in a call to the function &lt;a href=&quot;http://requirejs.org/docs/api.html#define&quot;&gt;define&lt;/a&gt;, where the parameters passed to &lt;code&gt;define&lt;/code&gt; reference the dependencies of your new script.&lt;/p&gt;

&lt;p&gt;By returning from this &lt;code&gt;define&lt;/code&gt; function, you decide what to expose from this module when it’s requested by something else. This is similar to the &lt;code&gt;exports.blah = ExportedObject&lt;/code&gt; format within CommonJS. If we manipulate exactly what is returned we can expose any number of class definitions, functions or arbitrary values that we choose.&lt;/p&gt;

&lt;h2 id=&quot;lets-go&quot;&gt;Let’s Go&lt;/h2&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;We’re going to make a test project to understand how to make these things work together. This will give us an idea of how to structure our application in a way that removes the problems of dependency resolution. The first thing we’ll need to do is to get the required libraries to run RequireJS with CoffeeScript. The specific files we need are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The RequireJS library&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://requirejs.org/docs/download.html&quot;&gt;http://requirejs.org/docs/download.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;The CoffeeScript plugin for RequireJS&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.github.com/jrburke/require-cs/latest/cs.js&quot;&gt;https://raw.github.com/jrburke/require-cs/latest/cs.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;The latest &lt;i&gt;coffee-script.js&lt;/i&gt; compiler (for use with the above plugin)&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.github.com/jashkenas/coffee-script/master/extras/coffee-script.js&quot;&gt;https://raw.github.com/jashkenas/coffee-script/master/extras/coffee-script.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;

&lt;p&gt;Next we’ll create some folders for our application, and for the sake of this example we’ll organise the above files that we’ve downloaded as follows. &lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;img src=&quot;http://3.bp.blogspot.com/-9JMMfQqrthc/T4wXMwmsdpI/AAAAAAAAAdI/j2B_0KSZ1gE/s1600/Screen+Shot+2012-04-16+at+13.57.00.png&quot; alt=&quot;&quot; /&gt;
Our file layout on disk&lt;/p&gt;

&lt;p&gt;Next we’ll create our html file for loading the scripts, this’ll be nothing more than a standard html document with a script tag in the head to load the &lt;i&gt;require.js&lt;/i&gt; library.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;RequireJS + Coffeescript&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lib/require.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-main=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;src/main&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the &lt;i&gt;data-main &lt;/i&gt;attribute on the script tag. This is specific to RequireJS, and it defines the entry point to our application. What we’re doing is telling RequireJS where the first file we want to execute is located, in this case it’s at “&lt;i&gt;src/main.js&lt;/i&gt;” (we’ve intentionally left out the &lt;i&gt;.js&lt;/i&gt; suffix on this path). &lt;/p&gt;

&lt;p&gt;We could set this to be anywhere in the directory tree, but it’s important that the &lt;i&gt;coffee-script.js&lt;/i&gt; and &lt;i&gt;cs.js&lt;/i&gt; files are located in the same place as the entry point. Also at this point we want to &lt;b&gt;&lt;u&gt;rename&lt;/u&gt;&lt;/b&gt; &lt;i&gt;coffee-script.js&lt;/i&gt; &lt;b&gt;&lt;u&gt;to&lt;/u&gt;&lt;/b&gt; &lt;i&gt;CoffeeScript.js. &lt;/i&gt;This is a requirement specific to the &lt;i&gt;cs.js&lt;/i&gt; plugin.&lt;/p&gt;

&lt;p&gt;Now we’ll create a simple &lt;i&gt;main.js&lt;/i&gt; file for use in our application. We’ll make sure it follows the AMD format by wrapping everything in a &lt;i&gt;define&lt;/i&gt; call, and because we don’t yet depend on anything it’ll be straightforward.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Running main.js!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our tree should now look like this:&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;img src=&quot;http://1.bp.blogspot.com/-3yNdVUICo-A/T4xKKVq_PAI/AAAAAAAAAdg/USB6k2r38zg/s1600/Screen+Shot+2012-04-16+at+17.34.27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here we can serve the files from the root of the project, and we should see our message output in the console for the index page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://4.bp.blogspot.com/-Rrla57aSdaM/T4wcTaLeVnI/AAAAAAAAAdY/syTx25m8OpE/s1600/Screen+Shot+2012-04-16+at+14.18.49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s humble, but that little message means we’ve almost configured everything correctly, and we can finally get down to writing the logic of our application. whoopty doo!&lt;/p&gt;

&lt;h3 id=&quot;the-application&quot;&gt;The application&lt;/h3&gt;

&lt;p&gt;We’ll create a simple test application in coffeescript. Let’s make it simple and add some text to the dom when the user clicks on the page. We’ll do it in three steps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;populate the dom with a super cool html button&lt;/li&gt;
&lt;li&gt;bind to a click event and write to the console&lt;/li&gt;
&lt;li&gt;bind to the same event and add some text to the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For demonstrating how to organise an application, we’ll also experiment with different ways of returning values from a module to show how we can expose different objects.&lt;/p&gt;

&lt;h3 id=&quot;adding-a-button-to-the-page&quot;&gt;Adding a button to the page&lt;/h3&gt;

&lt;p&gt;We’ll do this by creating a module which simply adds a standard button element to the page. We’ll call into this module from our &lt;i&gt;main.js &lt;/i&gt;module utilising the CoffeeScript plugin we have sitting nicely in the &lt;i&gt;src&lt;/i&gt; folder.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;() -&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;input = &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;input.innerText = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Super Cool Test Button!&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;the-button&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As before, we’ve created a file that follows the AMD format. This is implemented via wrapping the entire module in a &lt;i&gt;define&lt;/i&gt; call. The empty array is to say that this module depends on nothing, and the empty parameter list for the function reflects that we aren’t passing any dependencies in.&lt;/p&gt;

&lt;p&gt;What’s happening here is that within the define call we are saying “here comes a module with no dependencies” - then within that function we are defining a single function which manipulates the dom to add a button to the document&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nv&quot;&gt;input = &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;input.innerText = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Super Cool Test Button!&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;the-button&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Because this is CoffeeScript, the last expression of a function is returned. In this case, the last expression within the define call is the definition the function above - the one that adds the button. This means that when we import this module elsewhere, all we are importing is the function above. Which we’re going to do now!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cs!app/add_button&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AddButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Running main.js!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AddButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case we’ve imported the module we just created and associated it with the parameter &lt;i&gt;AddButton. &lt;/i&gt;Now within the context of main.js we have access to whatever we exported, which in this case was the single function we defined. By executing it directly we’re performing the add button functionality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://4.bp.blogspot.com/-VLwGrtfATDs/T5aUl4tKZ_I/AAAAAAAAAeg/AtRkR6GVrhU/s1600/Screen+Shot+2012-04-24+at+12.54.38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nice!&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/coffeescript-requirejs-and-you/&quot;&gt;Coffeescript RequireJS and You!&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on April 24, 2012.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[rise from your grave]]></title>
  <link rel="alternate" type="text/html" href="/blog/rise-from-your-grave/" />
  <id>/blog/rise-from-your-grave</id>
  <published>2012-03-17T00:00:00+01:00</published>
  <updated>2012-03-17T00:00:00+01:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">it&#39;s time to resurrect a blog..

  &lt;p&gt;&lt;a href=&quot;/blog/rise-from-your-grave/&quot;&gt;rise from your grave&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on March 17, 2012.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[conway's game of life in ruby (gosu + chingu)]]></title>
  <link rel="alternate" type="text/html" href="/articles/conways-game-of-life-in-ruby-gosu-chingu/" />
  <id>/articles/conways-game-of-life-in-ruby-gosu-chingu</id>
  <published>2010-06-06T00:00:00+02:00</published>
  <updated>2010-06-06T00:00:00+02:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;p&gt;inspired by this &lt;a href=&quot;http://www.glitchds.com/cellular-automaton-music-sequencer/&quot;&gt;awesome nds tracker&lt;/a&gt; and an old &lt;a href=&quot;http://www.boingboing.net/2009/05/27/celluar-automata-at.html&quot;&gt;boingboing&lt;/a&gt; post, i decided to make an implementation of conway’s game of life in ruby, using the gosu and chingu game development gems.&lt;/p&gt;

&lt;p&gt;after finding a way round the terrible deep cloning in ruby it was incredibly painless and very interesting. i like how the initial choice of cells influences whether you have a beautiful symmetrical oscillating pattern or a horrible cancerous mess, after 100 or so generations.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/427880.js&quot;&gt; &lt;/script&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/conways-game-of-life-in-ruby-gosu-chingu/&quot;&gt;conway's game of life in ruby (gosu + chingu)&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on June 06, 2010.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[2D OBB Collisions in XNA]]></title>
  <link rel="alternate" type="text/html" href="/articles/2d-obb-collisions-in-xna/" />
  <id>/articles/2d-obb-collisions-in-xna</id>
  <published>2010-03-07T00:00:00+01:00</published>
  <updated>2010-03-07T00:00:00+01:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;p&gt;OBBs (Oriented Bounding Boxes) allow for a greater degree of accuracy than their axis aligned counterparts in the field of collision detection. It turns out this is a &lt;i&gt;lot &lt;/i&gt;simpler to implement in 2D than 3D.&lt;/p&gt;

&lt;p&gt;Here’s my own take on it, which I hope to put to heavy use in an ongoing project. The OBB is modelled by an orientation matrix (in the form of two Vector2’s because the Matrix type seems to suck), an origin and a Vector2 representing the +ve half widths in the x and y axis.&lt;/p&gt;

&lt;p&gt;The object includes intersection methods and a crude draw method for debug purposes (you’ll need to supply your own spritebatch and a 1x1 texture2d to use it)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/324608.js&quot;&gt; &lt;/script&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/2d-obb-collisions-in-xna/&quot;&gt;2D OBB Collisions in XNA&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on March 07, 2010.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[syobon action]]></title>
  <link rel="alternate" type="text/html" href="/blog/syobon-action-155-lives/" />
  <id>/blog/syobon-action-155-lives</id>
  <published>2010-01-06T00:00:00+01:00</published>
  <updated>2010-01-06T00:00:00+01:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a style=&quot;margin-left: 1em; margin-right: 1em;&quot; href=&quot;http://3.bp.blogspot.com/_LQqiRvv_0aI/S0Spva3HNAI/AAAAAAAAAVA/STrJfUcWj_E/s1600-h/syobon.jpg&quot;&gt;155 lives
&lt;img alt=&quot;&quot; src=&quot;http://3.bp.blogspot.com/_LQqiRvv_0aI/S0Spva3HNAI/AAAAAAAAAVA/STrJfUcWj_E/s320/syobon.jpg&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;/blog/syobon-action-155-lives/&quot;&gt;syobon action&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on January 06, 2010.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[BIGJam 2009]]></title>
  <link rel="alternate" type="text/html" href="/blog/bigjam-2009/" />
  <id>/blog/bigjam-2009</id>
  <published>2009-08-10T00:00:00+02:00</published>
  <updated>2009-08-10T00:00:00+02:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://4.bp.blogspot.com/_LQqiRvv_0aI/Sn_-jkDA-gI/AAAAAAAAASI/efeVtQqVTyQ/s1600-h/DSC_0324.JPG&quot;&gt;&lt;img style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 455px; height: 304px;&quot; src=&quot;http://4.bp.blogspot.com/_LQqiRvv_0aI/Sn_-jkDA-gI/AAAAAAAAASI/efeVtQqVTyQ/s400/DSC_0324.JPG&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5368289167774120450&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;span style=&quot;font-size:78%;&quot;&gt;photo by sir alex may&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;Berlin was incredible. I made 3 terrible games, each in their own 3 hour segments. I also met some very cool people and learnt a lot about games dev.&lt;br /&gt;&lt;br /&gt;Most importantly, I think I&#39;ve unstuck all that was keeping me back and blocking my ideas. I did so much more in one of those 3 hour periods than I&#39;ve probably done all summer. Can&#39;t wait for next year to roll around.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center; font-style: italic;&quot;&gt;bigjam stats:&lt;br /&gt;lines of ruby code : &gt;2000&lt;br /&gt;hangovers: 3&lt;br /&gt;coffees: 13&lt;br /&gt;hours of sleep: negligible&lt;br /&gt;awesomeness: very much so&lt;br /&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;/blog/bigjam-2009/&quot;&gt;BIGJam 2009&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on August 10, 2009.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Cho Ren Sha 68k]]></title>
  <link rel="alternate" type="text/html" href="/blog/cho-ren-sha-68k/" />
  <id>/blog/cho-ren-sha-68k</id>
  <published>2009-06-17T00:00:00+02:00</published>
  <updated>2009-06-17T00:00:00+02:00</updated>
  <author>
    <name>Donald Hutchison</name>
    <uri></uri>
    <email>contact@donaldhutchison.info</email>
  </author>
  <content type="html">&gt;&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://4.bp.blogspot.com/_LQqiRvv_0aI/SjkJiKicj-I/AAAAAAAAAFY/0nx0QI4XouA/s1600-h/pic.png&quot;&gt;&lt;img style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 299px;&quot; src=&quot;http://4.bp.blogspot.com/_LQqiRvv_0aI/SjkJiKicj-I/AAAAAAAAAFY/0nx0QI4XouA/s400/pic.png&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5348316515028209634&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://db.tigsource.com/screenshot/image/492/medium/chorensha01.png?1229563406&quot;&gt;&lt;img style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 300px;&quot; src=&quot;http://db.tigsource.com/screenshot/image/492/medium/chorensha01.png?1229563406&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_0&quot;&gt;&lt;br /&gt;Cho&lt;/span&gt; &lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_1&quot;&gt;Ren&lt;/span&gt; &lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_2&quot;&gt;Sha&lt;/span&gt; 68k (not actually 68&lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_3&quot;&gt;kB&lt;/span&gt;) is your generic vertical &lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_4&quot;&gt;shmup&lt;/span&gt;. 16-bit niceties from an obscure &lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_5&quot;&gt;japanese&lt;/span&gt; computer and a jarring &lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_6&quot;&gt;bleepy&lt;/span&gt; soundtrack meet up over coffee to discuss how much they hate you.&lt;br /&gt;&lt;br /&gt;As usual, you pilot your angular craft like soap in a fat man&#39;s bathtub - squirting from side to side whilst deftly avoiding the overwhelming mass that threatens to crush your liberation and &lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_7&quot;&gt;independance&lt;/span&gt;. The familiar arrow keys + Z and X controls pose no problems for people who know what&#39;s happening. The lack of auto-fire and unusual fanning motion of your default weapon means the player has to tap out a constant beat in order to hit what&#39;s directly in front.&lt;br /&gt;&lt;br /&gt;The difficulty isn&#39;t too soul crushing. The bullet patterns never force you into pixel-perfect dance routines, nor does it require the amphetamine riddled &lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_8&quot;&gt;twitchyness&lt;/span&gt; that defines so many of the genre. In fact, this game is pretty &lt;span class=&quot;blsp-spelling-corrected&quot; id=&quot;SPELLING_ERROR_9&quot;&gt;accessible&lt;/span&gt; as far as vertical &lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_10&quot;&gt;shmups&lt;/span&gt; go.&lt;br /&gt;&lt;br /&gt;The graphics quickly get repetitive and the backgrounds remains constant throughout play. The game never offers anything to stand out from others in it&#39;s genre and provides nothing more to improve it&#39;s replay value.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_11&quot;&gt;Cho&lt;/span&gt; &lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_12&quot;&gt;Ren&lt;/span&gt; &lt;span class=&quot;blsp-spelling-error&quot; id=&quot;SPELLING_ERROR_13&quot;&gt;Sha&lt;/span&gt; 68k runs fine on Vista, with some jarring sound issues sporadically affecting the soundtrack.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://db.tigsource.com/games/cho-ren-sha-68k&quot;&gt;(link)&lt;/a&gt;

  &lt;p&gt;&lt;a href=&quot;/blog/cho-ren-sha-68k/&quot;&gt;Cho Ren Sha 68k&lt;/a&gt; was originally published by Donald Hutchison at &lt;a href=&quot;&quot;&gt;Donald Hutchison&lt;/a&gt; on June 17, 2009.&lt;/p&gt;</content>
</entry>

</feed>