[{"categories":null,"contents":"Anki is a flashcard app which uses a spaced repetition algorithm to help with memorising facts and committing items to memory.\nAfter realising there was no library which could create flashcard decks with integrated media (which is very useful for spoken phrases and pronounciation when learning languages), I created this gem.\nThe gem provides a simple Ruby api to create flashcards and decks, as well as embed supported media formats (audio, images and video). Upon deciding to publish the library will package all referenced media, create an SQLite database to hold card + deck data and then package everything together in the format recognised by Anki. This required a mixture of reverse engineering, cross platform testing and schema investigation.\n","permalink":"https://donaldhutchison.info/projects/contributions/anki-rb/","tags":["Ruby","Ruby Gems","SQLite"],"title":"anki-rb - A ruby gem to create Anki flashcards for spaced repetition learning."},{"categories":null,"contents":"The now defunct Cocos2D-ObjC project was a hugely successful games development library for developing iPhone games. Building on top of OpenGLES, it offered a more performant means of rendering graphics and manipulating visual objects than the UIKit based API offered by default. The scene graph API implemented in Cocos2D is now reflected in Apple's own SpriteKit framework.\nAfter using the library for several years in a few mobile game projects, I got a position working as a full time maintainer of the library, making contributions to the core library as well as it's companion UI building app SpriteBuilder (analogous to Interface Builder for UIKit).\n","permalink":"https://donaldhutchison.info/projects/contributions/cocos-2d/","tags":["iOS","Objective-C","Mobile","Game Development"],"title":"Cocos2D-ObjC - Game Development Tookit for iOS"},{"categories":null,"contents":"Completed! I finished the Advent of Code for 2020, and this time pushed myself past the holiday indulgences to actually complete all 50 challenges!\nI pushed myself to use Elixir for everything this year, and barring a few small instances where being able to mutate a value would have saved me a lot of headaches (specifically this evil creation) it was a pretty awesome experience. Aside from the usual 2D grid geometry problems, there were a lot of new things in there and I discovered some nice things on the way.\nHere's some unsorted notes and discoveries I made during the whole process.\nNotes  Elixir's pattern matching is really nice for interpreting VM instructions  Just pattern match the op code, extract the params and do the operation!   Conway's game of life can be extended to higher dimensions (hypercubes of life haha)  Simply keep track of the live nodes, and create a function to find the neighbors of each node The number of times a certain neighbor is duplicated in the output is the number of live neighbors it has By changing the neighbor function to work on 2D, 3D or 4D coordinates, you get the behavior of the system in a higher dimension!   Day 20 was by far the most involving  To even get to validate the test cases took a lot of effort A lot of image convolution   Elixir / Erlang map keys are ordered by default up to 32 entries  This frustrates a lot of image convolution, especially when the test cases are far below 32x32.. https://github.com/erlang/otp/blob/1dbfc5fdc7dfecd69bb7e8a86fbadc844c5ffa58/erts/emulator/beam/erl_map.h#L73-L77 Explicitly call your map keys in order if you need order!   Regex lookahead is a thing  I've somehow never needed to find overlapping matches in a pattern space before A deep sense of fear sets within me..    Checkout the code in my GitHub Repo\n ","permalink":"https://donaldhutchison.info/blog/advent-of-code-2020/","tags":["elixir","learning","advent of code"],"title":"Advent of Code 2020"},{"categories":null,"contents":"Marvelroad was an app designed around an MVP for Mercedes owners. The idea was to both host a curated selection of enjoyable driving routes, as well as generate new routes and content based on user preferences. The user would provide a list of desirable features, such as landmarks, speed limits, nice views and driving time, and then the app would calculate a driving route based on these choices.\nI was the sole developer for the backend of this app, and created a simple REST api which would provide the app with data and routes based on the user's choices. For deployment I provisioned a Kubernetes cluster running on AWS in compliance with internal infrastructure and security requirements.\n  Marvelroad     Marvelroad   ","permalink":"https://donaldhutchison.info/projects/creations/marvelroad/","tags":["iOS","Ruby","Sinatra","Docker","Kubernetes","GIS","AWS"],"title":"Marvelroad (iOS)"},{"categories":null,"contents":"Kiekmo was an Android app developed for Hamburg Sparkasse and designed to bring customers physically into the branch locations by offering a free item storage system (for use with online sales ala ebay). The customer would place an item within a locker provided at a Sparkasse branch and receive a lock code via the app. The customer would then provide the code to whoever purchased their item online and conveniently let the buyer access the item at will.\nThe app was written entirely in Kotlin and communicated with a GraphQL backend for updating comments, news feed and interaction with the physical lockers in branch locations. I personally worked upon the news feed, UI design and GraphQL integration.\n  Kiekmo     Kiekmo   ","permalink":"https://donaldhutchison.info/projects/creations/kiekmo/","tags":["Android","Kotlin","GraphQL","Mobile"],"title":"Kiekmo (Android)"},{"categories":null,"contents":" Whether youâ€™re an expert developer or just getting started, SpriteBuilder will help you build top-quality games in a fraction of the time. Open source and free.o\n SpriteBuilder is an IDE designed around Swift / Objective C games development with the Cocos2D framework. Using SpriteBuilder you can visually design games and applications through the editor and know they will look consistent on both iOS and Android.\nAs one of the core team members I was responsible for working with the community, managing pull requests and helping guide the roadmap. I also designed the build system and moved the project to Circle CI.\n  spritebuilder     spritebuilder   ","permalink":"https://donaldhutchison.info/projects/creations/sprite-builder/","tags":["Open Source","MacOS","Objective-C","Tools","UI Design"],"title":"SpriteBuilder (MacOS)"},{"categories":null,"contents":"Jelly Splash was a cross platform mobile game where the goal was to connect as many jellies as possible in order to beat the level and advance. Jelly Splash has had over 75 million players and was a huge success for Wooga.\nAs part of the core team, I was involved in daily feature development and maintenance. I focused heavily on the Android side in this project and was personally responsible for porting the game to the Kindle Fire store, where it was heavily featured and relatively successful given the market size.\n  jellysplash     jellysplash   ","permalink":"https://donaldhutchison.info/projects/creations/jelly-splash/","tags":["Android","iOS","Java","Objective-C","Mobile","Kindle"],"title":"Jelly Splash (Android + iOS)"},{"categories":null,"contents":" Note: The broadcast referral functionality has been deprecated by Google Play and will be removed on March 2020. The new implementation involves connecting directly to the Play Store app - documentation is available at https://developer.android.com/google/play/installreferrer\n The install referrer is an intent on android, which is broadcast after the app install to give the app information about the reason it was installed. This is useful if you're tracking marketing / paid installs and you want to tell between paid and organic installs.\nBut testing this can be a huge pita, as you need to have your manifest setup to correctly add a listener for this intent, and you need to time the broadcast correctly.\nDue to how android applications are designed, there may be several components active at any point in time. If you have a reciever correctly configured for the INSTALL_REFERRER intent - i.e. you have the following section in your AndroidManifest\n\u0026lt;receiver android:name=\u0026quot;CLASSPATH TO YOUR RECEIVER\u0026quot; android:exported=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026quot;com.android.vending.INSTALL_REFERRER\u0026quot; /\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/receiver\u0026gt;  Then as soon as your application is on the system (after install) the component above will be invoked when an intent with the above action is sent.\nTo test this you can run\nadb shell am broadcast -a com.android.vending.INSTALL_REFERRER -n \u0026lt;packagename\u0026gt;/.\u0026lt;java classname\u0026gt; --es \u0026quot;referrer\u0026quot; \u0026quot;referrer=value\u0026amp;stuff=url\u0026quot;  After the app has been installed (but before it is launched). The timing between install and launch isn't as important - the information will be there on the first launch of the application.\n","permalink":"https://donaldhutchison.info/blog/2016-07-05-install_referrer/","tags":["android","adb","programming"],"title":"Install referrer testing"},{"categories":null,"contents":"In the past few weeks I discovered Omniglot and Anki and thought it'd be pretty cool to be able to create flashcards for the useful phrases listing. Being able to say \u0026ldquo;this guy pays for everything\u0026rdquo; in Turkish, or \u0026ldquo;my hovercraft is full of eels\u0026rdquo; in Norwegian could be an incredibly useful life skill.\nAnd so AnkiRB came into existence.\nThe library basically replicates what the application itself does when you create flashcards via the gui, except uses ruby's sqlite package to create flashcards and bundle media files together.\nWith a combination of this and some jQuery, its pretty easy to grab all the phrases + sound files for a language and create flashcards for them.\nrequire \u0026#39;ankirb\u0026#39; #create a deck deck = Anki::Deck.new \u0026#39;FancyExampleDeck\u0026#39; #create a basic card card = Anki::Card.new(:front=\u0026gt;\u0026#34;What is the french for cheese omelette?\u0026#34;, :back=\u0026gt;\u0026#34;Omelette au fromage\u0026#34;) #add audio to the back card.back \u0026lt;\u0026lt; \u0026#34;dexters_lab_omelette.wav\u0026#34; #add card to the deck deck.add_card card #export to ~/Anki/Decks/FancyExampleDeck.apkg Anki::apkg.export deck, \u0026#34;~/Anki/Decks\u0026#34;  ","permalink":"https://donaldhutchison.info/blog/2016-03-28-anki-rb/","tags":["ruby","anki","learning","lib"],"title":"AnkiRB - spaced repetition flashcards made in ruby"},{"categories":null,"contents":"Make is solid. It's been around since before the internet and still one of the most important tools used today. As such - it's tried, proven, tested, and was used in some of the most successful projects out there.\n\u0026hellip;but what are the chances that something so old got it right the first time? What are the chances that good old Make is the be-all, end-all, perfect ultimate solution for every possible development project? Of course not, and noone says it is - so let's try an exercise in frustration and compile some C using Rake - the cool fresh ruby little brother to big pappy Make.\nWhat's Rake?  Rake is a Make-like program implemented in Ruby\n Rake is Ruby's version of the Make build system. Created in 2003 by the late Jim Weirich, it's goal is to get away from the idiosyncratic build system syntax and express build rules in plain Ruby. According to wikipedia, it's the most downloaded ruby gem of all time and has been bundled with OSX since 2011.\nRake has a diverse set of functions but in my experience it's primarily used to drive a single command line interface for a ton of unrelated scripts and tools. By invoking your scripts from rake tasks you can create a single unified point of access for both developers and other tools to work with. This is cool for a variety of reasons, e.g. having a Continuous Integration server run the rake task directly gives a build system that is both under version control and available locally. But this is true of many build systems\u0026hellip; Where Rake really shines is in it's incredibly powerful File, Rule and Task functionality.\nI was lucky enough to see Jim's Power Rake presentation at the Scottish Ruby Conference in 2012 where he spoke at length about the awesomeness of the pathmap method and the FileList class. Why not use these tools for modern C development? Even though one of the first examples ever provided was using Rake to compile a basic C program, it still lacks behind Make\u0026lsquo;s out of the box no-config compilation rules. Let's see what it takes to get a Rake to walk like a Make.\nLet's Make Rake Like Make Even without a Makefile, Make can still work out how to compile and link your C files. Without a Rakefile, Rake is a thing that isn't useful.\nThis is because of the huge library of implicit rules and behaviour that Make has collected over it's lifetime in the battlefield. Type make -p in a directory without a Makefile to list what it already knows before you've told it anything. Rake has none of this, so we'll need to replicate some functionality before we have a contender on our hands.\nOur Goal What we want is the same \u0026ldquo;no config\u0026rdquo; approach in Rake that Make has. Given a directory that looks like\nâ”œâ”€â”€ Rakefile â”œâ”€â”€ foo.c We want to be able to run rake foo and end up with an executable named foo. Additionally we could also run rake foo.o and create the intermediate object file directly.\nStealing Make's Implicit Rules The functionality we need to steal from Make to get our basic compilation working is\n creating .o files from .c files creating executables automatically linking object files we depend on  We can see from Rake's task manager source that a file task is generated when rake is given an argument which matches an existing file in the pwd. Now that we know this fact, we can add rules that will force arbitrary filenames passed to Rake result in compilation.\nCreating .o Files From .c Files The first step will be to compile an object ( .o) file from a corresponding .c file. Make has this defined as $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c, stripping this down and expressing it in Rake\u0026lsquo;s rule syntax, we get\nrule \u0026#34;.o\u0026#34; =\u0026gt; \u0026#34;.c\u0026#34; do |t| `cc -c #{t.source}-o #{t.name}` end The first line basically says \u0026ldquo;whenever I need a *.o file, I also need an existing .c file with the same name\u0026rdquo;. Now in our example - when we run rake foo.o, the foo.o will match against the .o section, and then following the rule rake will look for a corresponding foo.c file, find it, and finally execute the block.\nRake passes a Task instance into the block, which is populated with a lot of information about the rule we just followed. From this task we take out the source (foo.c) and the output name (foo.o) and then pass them into the compiler via a shell invocation.\nCreate Executable From .c What we want to do here is solve the situation of rake foo and directly create an executable without the intermediate fluff hanging around. This can be done by matching the rule against a regular expression.\nRather awkwardly, we want something that matches against a string without a file extension. To specify that we match against any string would end up creating a circular dependency with the rule above. We can naively match a file extension with the expression /\\w*\\.\\w*/ (we're not going to take multiple dots in filename into account), then we can invert that pattern and get the horrible looking /^((?!\\w*\\.\\w*).)*$/which should match any single word without a file extension attached.\nThrowing that into Rake and adding the compilation + linking will give us\nrule /^((?!\\w*\\.\\w*).)*$/ =\u0026gt; \u0026#34;.c\u0026#34; do |t| `cc #{t.source}-o #{t.name}` end Linking From Multiple Files So far so good. We can now compile very simple C executables with nothing but Ruby. Granted, we need the presence of a Rakefile and some arcane rules to compile everything correctly, but we can compile arbitrary programs nonetheless.\nBut what if we want to do something non trivial?? With a single line in a Makefile like x: y.o z.o we can compile and link against any number of object files. This makes it actually useful! How can we go about adding this into Rake?\nPretty easily actually, thanks to the Ruby standard library. As mentioned above, the Task object in Rake contains a lot of useful information, including a list of dependencies for the task. We can extract any object files and then pass them into the call to cc by changing the rule above as follows.\nrule /^((?!\\w*\\.\\w*).)*$/ =\u0026gt; \u0026#34;.c\u0026#34; do |t| deps = t.prerequisites objects = deps.select { |d| d.pathmap == \u0026#34;.o\u0026#34; } `cc #{t.source}#{objects.join \u0026#39; \u0026#39;}-o #{t.name}` end Now if we add a similar rule to our Rakefile (in our case file 'x' =\u0026gt; [\u0026quot;y.o',\u0026quot;z.o\u0026quot;]) Rake will resolve the dependencies, compiling y.c and z.c into object files before compiling x.c and linking against y.o and z.o. Cool!\nNow (after some minor tidying) we have a very basic Rakefile like this which will let us compile just like we're using Make\n Round One - Fight! OK, now we have our contender. Let's throw him in the ring and see how he stands against a pro. Let's not start small, let's go all out brave or grave. We're going to take the Makefile from Zed A. Shaw's awesome Learn C The Hard Way series, and see how we can trick out our Rakefile to do the same tasks. Then we'll decide which solution is more convenient, readable and maintainable.\nAfter following through Learn C The Hard Way you end up with a Makefile that should look like this. There's quite a lot going on here - a lot of tasks and targets with multiple dependencies and outputs. What we are trying to do here is replicate the exact same functionality, all tasks, in our Rakefile. Let's quickly breakdown what's going on and see what's there.\nZed's Makefile contents I'm going to give a very brief overview of the cool Rake features that we're going to use to get the same result as what's going on in this Makefile.\nConfiguration Make has a lot of variables built into it's compilation rules, which allows for a very flexible and direct means of passing parameters into the build commands. You can see this is used in the first line of the Makefile. Since Rake doesn't have any of this by default, we're going to take a simple means of keeping our config in constants, without optional environment overrides.\nSource Files In lines 5-9 of the Makefile, we can see that applicable file lists are being constructed using Make\u0026lsquo;s built in filesystem functions, wildcard and pathsubst. This is where we can use Rake\u0026lsquo;s awesome FileList class to construct these collections. In addition, Rake extends the String class with some nice methods that let us interact with standard strings as if they are filepaths. Changing file extensions and getting path components is really easy with this functionality. We'll use the same approach for the target definitions too.\nTasks Here's where we start getting into the actual work of the build system. Make\u0026lsquo;s default task is simply the first declared in the Makefile, Rake has an explicit :default task that can be set to any desired value. We can set dependencies to have the default task build everything, much like in Zed's Makefile.\nThe interesting part comes to when we encounter the programmatic tasks, like the $(PROGRAMS) task on line 22. Here the PROGRAMS variable has been set to the contents of the bin directory, but with all suffixes removed - to indicate executable files that need to be created. This is already handled by the rules we made earlier, but the Makefile also modifies the CFLAGS variable to link against the entire built library.\nHere we can see that Make has a pretty interesting feature where it exploits a the way it variables, and essentially changes the existing CFLAGS variable within the scope of a certain task. This means that CFLAGS refers to something different for each task, namely it has the built library appended to it for the PROGRAMS and SO_TARGET tasks.\nFor more info on how make does this, you can check out Make's manual in the section Two Flavours of Variable {: .notice}\nThis is another feature we're going to have to replicate in Rake, and since we are just looking to prove a concept - unfortunately it's going to be a bit dirty. Instead of the variable replacement functionality, we'll just add the ability to specify additional CFLAGS for a task. Having task specific options implies a place to store task specific information, so let's do the bad thing and open up the Task class and add a field to it. In doing this we are tying the abstract concept of a build task to concrete C compiler options - and in a larger project that would be totally inexcusable - but in the context of a single Rakefile let's just go for it.\nmodule Rake class Task attr_accessor :task_flags def task_flags @task_flags ||= [] @task_flags end end end Clean and Clobber Simply by adding the line require 'rake/clean', we get clean and clobber tasks for free (clobber is clean's big brother, removing all generated files instead of just intermediate files). This is supported via the addition of two built in FileList instances with the appropriate names. By adding files to this list we can ensure that they'll be cleaned up with the correct task.\nTests By default in Make, every task is a file task. This means that for every task you declare, Make wants to create a file with the same name. If a file with that name already exists, then nothing will happen. In this case we have a \u0026ldquo;tests\u0026rdquo; directory and a task with the same name. To override this feature in Make you can add the file to the .PHONY target, which basically means \u0026ldquo;run this task even if it's file exists anyway\u0026rdquo;. In Rake we don't have such problems, so we can just define standard task's and skip along our merry way.\nValgrind One final quirk that we need to address is how Learn C the Hard Way tells it's test script to run the unit tests under Valgrind. From Make we can export variables directly to the environment, whilst with Rake we will need to do this explicitly in our shell invocations. We can use the convenience method we implemented above, and due to the way Kernel#system takes an optional hash as the first parameter for environment vars, we can just add our stuff here.\nConclusion! Awesome! We can now build and link our library using nothing but Rake. Following the steps above, we now have a Rakefile that looks like this, and can do everything our Makefile initially did.\nExcept uh\u0026hellip; we have almost doubled the LOC\u0026hellip; we've made awful compromises to one of the core classes of Rake itself, and we don't nearly have the flexibility and control that Make gives us from the get go. It's pretty clear from this that we are forcing Rake to do something that it's not totally designed for. Not to mention the dependencies and portablity concerns we're placing on having Ruby + Rake installed on every target build machine. Were we to take this further we'd ideally have a set of Task / FileTask subclasses to encapsulate any C specific options, and we'd have a set of rules that match Make\u0026lsquo;s impressive repertoire that we could painlessly import at the top.\nIt looks like Make is the Apollo Creed to Rake\u0026lsquo;s Rocky Balboa. Make has ultimately won out in the first instance through technical prowess and experience, but perhaps in a series of unsatisfying followup movies (read: blog posts) Rake will come back to win the world heavyweight build system title. It's clear that Rake can go the distance once you put in enough effort.\n","permalink":"https://donaldhutchison.info/blog/2014-10-19-compiling-c-with-rakefiles/","tags":["ruby","rake","c"],"title":"Compiling C with Rakefiles"},{"categories":["articles"],"contents":" Note: This is a post I created for internal distribution when writing bug reports for mobile applications. I'm sharing it here because I think it's useful for future situations.\n What's a bug report Bug reports exist only to inform people about software defects. They are not for notes, for tracking work done or for planning. There are better systems for this. The best bug reports will have as much appropriate information as possible to help asses get kicked as fast and effectively as possible.\nIncluding the correct information in a bug report will help the problem to be discovered, diagnosed and solved in a timely manner - without this information, more questions will be needed before an attempt can be made at trying to fix whatever went wrong.\nWhat should be in a bug report Steps to reproduce The most important thing in a bug report is reproduction steps. This means a short description of what you did to make things go wrong. The best version of this will include only the steps necessary to recreate the defect. By following this, a developer should be able to come across the same problem as was reported by the tester / user. If the problem isn't always reproducible, a rough estimate of how often the problem occurs would be helpful in keeping sanity in check..\nThis is useful not only in helping locate the issue, but can be used to identify duplicates or related issues.\nVersion / Device information A listing of the artifact version and device used when the defect was encountered will help pinpoint where the problem lies and when it was released. It is also very helpful when trying to reproduce the problem in the same situation as it was discovered. Without this info, there is no way of really knowing if the problem has already been fixed or tracking it's lifetime.\nTester assumptions / expectations Next, a listing of the results that the tester had in mind when encountering the problem can be used to help assess the validity of the problem. This is usually in the form of \u0026ldquo;Expected Results\u0026rdquo; and \u0026ldquo;Actual Results\u0026rdquo;, i.e. \u0026ldquo;I expected the items in the well to increase when tapping on the resource icon, but what actually happened was that the application didn't respond to the input.\u0026rdquo;\nSummary A very short and concise summary is great. Try and balance it between being as short as possible and as specific as possible. \u0026ldquo;Graphical Issues in UI\u0026rdquo; is pretty bad, but there have been worse. \u0026ldquo;UI distorted in Contact View with German locale\u0026rdquo; is great.\nOther awesome things  Screenshots - if it's a UI based issue or something that can only really be seen, screenshots are awesome Related Issues - if there are existing bugs that have a similar scope, linking against them will be useful in finding the severity of the issue. Logs / Crash Dumps / Stack Traces - if you have related logs, please attach them to your ticket. Everyone will love you for it.  An example bug report Items are uncollectable on far left of screen If you try to touch something on the left edge of the screen (a resource or collectable item), the touch seems to be registered in the wrong place and the item cannot be collected. To Reproduce: 1. Start harvesting something on the left edge of the map (in an explored area) 2. Move the screen so that the object is just barely contained within the viewport 3. Try to tap on the item Expected: You can collect the stuff, and the functionality works as if it was touched in regular circumstances. Actual: The wrong functionality is invoked. In the above case an \u0026#34;Explore Area\u0026#34; popup is usually shown, as if an expansion had been tapped instead of a resource. Incidence: Happens about 3 out of 5 times Tested on: * Snapshot #2874 * iphone5 running ios 6.1.4 ","permalink":"https://donaldhutchison.info/blog/2014-02-17-how-to-write-bug-reports/","tags":["qa","testing","software","bugs"],"title":"How to write a bug report"},{"categories":["articles"],"contents":"recusiveDescription is a pretty cool method. It's on each UIView, and when called it gives you a quick and dirty description of the current view hierarchy relative to that view.\nUsually you'd use this in the debugger, whilst on a breakpoint, to sanity check the positions and children of a view. This is a short gist that adds the same functionality to a CCNode subclass - the common subclass of most visual entities in a Cocos2d project.\n ","permalink":"https://donaldhutchison.info/blog/2014-02-04-ccnode-recursive-description/","tags":["objective-c","cocos2d","programming","iOS","iPhone"],"title":"CCNode Recursive Description"},{"categories":["articles"],"contents":"For reasons I won't get into, I found myself spending Christmas in Wick on the north east tip of Scotland. This being the second time it's occurred I was familiar with the quirks and isolation of this part of the world. One of the more upswinging things that happens is that every 26th December, there's a charity raffle in the local Seaforth Club. This is where you buy some tickets, drink, win prizes and drink some more.\nAgain, this being the second time I've attended, I had a grudge to bear after last years events - specifically I didn't win anything and I felt pretty grumpy about it. \u0026ldquo;2013 will be different!\u0026quot;, I said to myself as I prepared a full on tactical strike against my previous misfortune.\nTickets everywhere As you can see in the header image, I went and bought as many tickets as my conscience would allow. You buy 10 tickets at a time, and the numbers increase sequentially from the first. I made sure to buy them at different intervals so I didn't end up with a completely contiguous series of numbers (I don't know if this helped but it made me feel smart.)\nNow, the way the raffle works is that an announcer will read out a number over the PA system (say - \u0026ldquo;56724!!\u0026quot;), and everyone will have to frantically check through their tickets for the number and, if lucky, present the winning ticket. If you take too long, or the announcer doesn't like you, a new number will be read out and you've lost your chance to claim a novelty stuffed dog or kitsch souvenir. If only there were some way I could automate this verification process\u0026hellip; I could spend more time enjoying festive beverages and the Christmas atmosphere, rather than continually reading through the far too many sheets of paper I had.\nRuboto! Ruby for Android! Fortunately I get paid to make computer programs, and this kind of thing is totally possible (to the point of being almost trivial) so I was able to go for it. Sneaking outside to the smoking area (there's no signal inside the building) I went out to search the Google Play store for mobile programming environments.\nI've previously experimented with these on device programming tools, but dismissed them due to their pretty impractical nature. Trying to do anything other than very basic alphanumeric text input on a smartphone is frustrating at the best of times, let alone anything with multiple brackets. But right now it seems like a prime use for such a thing, and after this experience I'm finding myself looking for other similar niche situations where I could be without access to a keyboard and need programming ability.\nI found the awesome Ruboto framework for Ruby. This was exactly what I needed - an android runtime for ruby with an IRB application. Nice.\nThe Code Now it's pretty simple. All I need are a few methods to keep track of some ranges (defined by a block of tickets), who they belong to, and whether a specific number is within the range. This kind of thing is totally handled by the standard lib, Range is awesome. After a few too many beers I ended up with the following code jammed into my phone.\ndef save_ranges name, range @ranges ||= {} @ranges[name] ||= [] @ranges[name] \u0026lt;\u0026lt; range end def clear @ranges = {} end def who_has number @ranges.each_pair do |n,r| person_ranges = @ranges[n] person_ranges.each do |ran| return n if ran.member? number end end \u0026#34;noone has #{number}\u0026#34; end Very simple, but exactly what I needed. Short and concise. But even with this small scope I ran into a few issues whilst creating the above methods. First of all, what is the exact method called that you use to determine whether a specific number is included within a range? include? or maybe contains???\nSome Stumbling I was in a situation where there was no 3G / GSM signal indoors, and Ruboto doesn't come with Rdoc, so I used the dirty hack of [1..2].methods - \u0026quot;\u0026quot;.methods. Typing this into iRB gives you a crude and dirty way of listing the exact methods attached to an object. The subtraction part is just a cheeky way of removing all the methods that exist on any subclass of Object. Anyway, it turns out the method is called member? - awesome.\nAnother issue was the expected problem of data entry. Not only during development (switching between the symbolic keyboard and alphabetic on the stock android setup was a pain), but whilst using the application itself. I'd convinced everyone else at my table to use my program - in exchange for a drink - and got some genuine in field testing. By getting my sister to read out random ticket numbers (and throwing in some false numbers at the same time) I discovered that I'd considered a few pages of tickets to be consecutive, when they were quite disparate. Now I had to manually sort out my nested array / hash of ranges with the touchscreen. More effort into validation would have helped here, but the data set was small enough that I could fix everything in 10 minutes or so.\nI'd considered adding some basic serialization support but after my sister's boyfriend bought the next round, I discovered I had more pressing matters to take care of.\nThe Results! Later the raffle started, and I got the chance to see if things would work out in my favour. The announcer read out a 5 digit number and waited for about 15 seconds. This is when you shout in excitement and run to the middle of the room with your ticket in order to claim your prize. After inputting everyone's tickets, and then triply validating them with as much attention I could muster, it was simply a case of typing in the winning numbers as they were announced.\n  Data entry and usage!  It was quite a while before someone at my table got a winner. I was actually starting to get nervous that I hadn't tested enough and everyone was missing out on novelty prizes due to my arrogance. Fortunately that wasn't the case, and soon enough my sister got a winning ticket.\n  Kirsty wins a hat, a fanny pack and some D cell batteries!! Super jealous!  After putting in all this effort, I felt entitled to some kind of reward (aside from the drinks that I tricked everyone else out of). Perhaps it was the Christmas spirit(s), but soon I received all I was hoping for and more.\n  Hair stylers! Lucky number 72887 never fails  Beautiful. Exactly what I was wanting. Here is a recent photo of me, to show how much I appreciate and need such a styling product in my life. It was pretty funny :P\nThe other prizes everyone got included a stuffed dog, a bottle of whisky, a large crate of cider and a stationary set. However, before setting out my mother had given me some money to buy tickets for her. This managing of other peoples\u0026rsquo; tickets was one of the reasons I decided to solve this with a phone, and as such is the original cause behind this post. The final prize to be drawn was the star prize - a mystery sum of money in an envelope. Everyone in the room was ablaze with excitement and blazing. And what do you know, the winning ticket was in my possession.\n  Star Prize! ROI: 300%! Good deal!  The final number was detected by the program and now I have to pay my mother. The guys at the table opposite us were pretty annoyed at how much we'd won, and recommended I use the money to \u0026ldquo;buy a one way ticket to inverness and don't come back\u0026rdquo;. You guys are the best. Also at this point I'd aliased the who_has method to simply w, which I probably should have done a long time before.\nConclusion Ruboto is pretty cool. This application was incredibly trivial and very specific to the situation I was in, but I question in what other similar situations I could create a short simple program to help me out. I feel the inherent nature of touch screens makes it difficult to input structured code, and as such would make anything pretty involving to be a frustrating experience - a topic brushed on by Jeff Atwood in an old post. Still, I want to keep my eyes open for another situation like this, and maybe come out with hair straighteners, whisky and Â£80 as a bonus for my initiative.\n","permalink":"https://donaldhutchison.info/blog/2014-02-02-ruby-at-the-bar/","tags":["ruby","mobile","android","ruboto"],"title":"Ruby Development in the Bar"},{"categories":["articles"],"contents":"Last weekend was the Berlin Global Game Jam 2014. I'd made it part of a new years resolution plan to get more involved and release some games / projects, and this represented the first step towards doing something.\nMy awesome team and I worked all weekend making a twin stick style shooter in Unity. This was my first experience with Unity, and as such I spent most of the time watching tutorials and desparately deciphering the mysteries of Unity's component / entity system. As such, I owe a lot to these guys for letting me hang around and break things.\nUnity is pretty cool, and I'm going to make a point of exploring it further for prototyping and short term projects.\nI really liked the game that we made, it's pretty fun to play - silly and frantic. As a bonus we came 3rd place in the public vote for Berlin, which is just super neat. It's definitely inspired me to be more active.\nCheckout the game at the global game jam site.\n ![]({{ site.url }}/images/ggj.jpg)\n","permalink":"https://donaldhutchison.info/blog/2014-01-30-global-game-jame2014/","tags":["game jam","ggj","unity"],"title":"Global Game Jam 2014"},{"categories":["articles"],"contents":"After being introduced to the awesome pixi.js framework by a colleague, I decided to update an old project of mine to make screwing around with it a little easier. This skeleton project comes with everything you need to run a pretty decent setup, and all at the cost of only two command line options.\nSkeleton Project! The initial configuration is usually a pain for me, so I threw together an example project and some scripts to manage this. With this setup, I can clone a github repo, pass in some parameters to configure what is downloaded, and start hacking immediately :)\nThe project comes with everything I usually want in a basic project. That is - bootstrap, jQuery, RequireJS and Coffeescript. This is of course pretty heavyweight for a minimal application, but I like that I can start fleshing out some ideas in as little time as possible.\nUse Me To use the project, simply follow the handy dandy following instructions. I'm assuming that you have Python and Ruby installed, because I am writing this for myself and I know I do.\n Clone the repo git clone https://github.com/rkachowski/coffeescript-skeleton.git  Choose a cool name for your new project cd into the directory, and run the setup command with your cool name rake setup[COOL_NAME_HERE] Your project is generated! Now serve that sucker up with rake run and check the badness at http://127.0.0.1:8000  Extras You can also include some optional libraries, and have them loaded into the default index.html file that comes with the project. Currently there is only support for pixi.js and phaser.io. To get these, just define the appropriate environment variables before setup, e.g. PHASER=yes PIXI=yes rake setup[SuperAwesomeProject]\nOne final thing is that the script is designed to self destruct it's git repo after setup. This is so you can create a new project without having to worry about basing it on the git history of the skeleton. To prevent this behaviour, pass the NORM=yes variable in the setup call (just like above).\nCheck it out on github!\n","permalink":"https://donaldhutchison.info/blog/2014-01-10-coffeescript-skeleton/","tags":["coffeescript","web development","requirejs","game development"],"title":"Coffeescript + RequireJS Skeleton Project"},{"categories":["articles"],"contents":"After getting sick of wordpress I decided to do the cool hipster thing and move my blog to Jekyll. Both for the nerd credit and the super awesome minimal design (static site = no moving parts! awesome!). After reading about Josh Kaufman's experience with Jekyll in his book it sounded like a pretty easy and maintainable platform to blog on.\nHowever\u0026hellip; On the way I encountered a few issues that almost took the chill out of a refreshing Thursday night in Berlin. Here I recount my issues for the sake of future ventures.\nThe Bad Wordpress Exporter / Jekyll Import Wordpress comes with a library of a bajillion plugins you can install to pimp out the features available to you. One of the defaults is an export to xml feature. I'd imagine this is pretty good for the average case, but I had a heavily customised theme that I perhaps too rashly purchased off of an internet marketplace.\nSuffice it to say, jekyll's default wordpress importer didn't even try to change my posts. The formatting was all garbled and I had to manually edit each post to fit with the markdown syntax and change any previous gist embeds to use the cool jekyll version. Through fortune, I have not quite yet reached my maximum bloggin output (read: I am chronically lazy ) and only had a few posts to deal with. This wasn't too hard - most of it can be done with a combination of regex and vim.\nJekyll post-recieve git hook One of the coolest things for me was having a deploy process setup with git. The ability to write and preview everything locally, and then publish with a simple git push was something I really wanted to have with my blog setup. There's even an example hook you can use from jekyll's documentation. Unfortunately I stumbled across a few hurdles whilst setting this up.\nRVM If you want to use the awesome RVM then you need to hit one of your shell's startup files to load it in. For me this was bash. The example hooks run with the #!/bin/sh shebang - this is not bash.\nSolution: Make sure you have #!/bin/bash at the top of your hook. You may need to run #!/bin/bash -l if all your setup is done in .bash_profile.\n{: .notice }\nFile Permissions This was just a result of my brain going on to autopilot, but make sure you create the folder you serve from with the correct user and permissions. In the hook this is /var/www/myrepo - the deployment user needs to be able to write to this directory.\nLocale Issues This was fun. Suddenly everything seemed to work, but Jekyll would complain about scores and scores of invalid characters in my blog post. Specifically it was saying /lib/jekyll/excerpt.rb:135:in 'scan': invalid byte sequence in US-ASCII (ArgumentError)\nNow this was weird, because I made pretty sure that all my files were encoded in UTF-8. After an hour or so of fighting and attempts at convincing the server that these files were in fact valid UTF-8 files, it turned out to be a locale issue. Running the locale command from a terminal gave me this\nlocale: Cannot set LC_CTYPE to default locale: No such file or directory locale: Cannot set LC_ALL to default locale: No such file or directory LANG=en_US.UTF-8 LANGUAGE= LC_CTYPE=UTF-8 LC_NUMERIC=\u0026#34;en_US.UTF-8\u0026#34; LC_TIME=\u0026#34;en_US.UTF-8\u0026#34; LC_COLLATE=\u0026#34;en_US.UTF-8\u0026#34; LC_MONETARY=\u0026#34;en_US.UTF-8\u0026#34; LC_MESSAGES=\u0026#34;en_US.UTF-8\u0026#34; LC_PAPER=\u0026#34;en_US.UTF-8\u0026#34; LC_NAME=\u0026#34;en_US.UTF-8\u0026#34; LC_ADDRESS=\u0026#34;en_US.UTF-8\u0026#34; LC_TELEPHONE=\u0026#34;en_US.UTF-8\u0026#34; LC_MEASUREMENT=\u0026#34;en_US.UTF-8\u0026#34; LC_IDENTIFICATION=\u0026#34;en_US.UTF-8\u0026#34; LC_ALL=` Ahh, cool. My language isn't set. Whatever.\nSolution: LC_CTYPE=en_US.UTF-8 LANG=en_US.UTF-8 export LC_CTYPE LANG - throw this in the top of the git hook\n{: .notice }\nAnd then.. Peaches! everything seems to work fine. The sweet is never as sweet without the sour.\nThe next thing to do was to setup a comment system with disqus, customise some header images and create a flattr account (heh). I look forward to overcoming my laziness and becoming the prolific and helpful tech blogger I know I never wanted to be.\n (header image from the awesome but short lived eponymous bbc series Jekyll )\n ","permalink":"https://donaldhutchison.info/blog/2013-07-18-installing-jekyll-oh-lordy/","tags":["blog","ruby","setup","jekyll"],"title":"Jekyll Migration Woes"},{"categories":["articles"],"contents":"The Problem\u0026hellip; When trying to optimise a coffeescript project with the latest r.js optimiser from the requirejs npm module I ran into the following error:\nCannot uglify file: /path/to/main.js. Skipping it. Error is:Â Unexpected character \u0026#39;\u0026#39; (line: 363, col: 3, pos: 15612) I downloaded the uglify-js package which r.js is using here to minify the script. Running it on the file in question in the output directory of the r.js build process gave me more information - specifically that uglify is dying on the character sequence Ã¯Â»Â¿ - a utf-8 byte order mark.\nIt turns out these marks were being input by an incorrectly configured template in visual studio. After looking into it, it appears that the BOM isn't necessary or even recommended in UTF-8 encoded files.\nThe Fix\u0026hellip; It follows that the quickest (and dirtiest) way is to simply strip these characters from files we wish to minify.\ngrep -lZr $\u0026#39;\\357\\273\\277\u0026#39; . | xargs -0 -l sed -i -e $\u0026#39;s/\\357\\273\\277//g\u0026#39; This command is using the grep and sed commands (by way of xargs) to A) find all files containing the BOM and B) remove the mark from those files inplace.\nThe call to grep has the options -lZr set ( l = only display filenames in the result, Z = separate the results with \\0, r = search recursively from the path provided - in this case \u0026ldquo;.\u0026rdquo; ) which we pipe to xargs and call sed once for each filename. The scary lookingÂ $\u0026rsquo;\\357\\273\\277\u0026rsquo; is simply theÂ Ã¯Â»Â¿ escaped. We use the $ to get the shell to expand the escaped codes - otherwise grep and sed will interpret the escaped characters as a back reference to something already matched (which we don't want). {: .notice}\nBecause we're using a simple shell script to invoke the r.js command, we can throw this command in there to do some preprocessing work on our source files.Â Ideally, this would be in a rake/make/cakefile but this fits my needs right now.\n","permalink":"https://donaldhutchison.info/blog/2012-06-11-optimising-coffeescript-files-with-r-js-unexpected-character/","tags":["coffee-script","development","programming"],"title":"Optimising CoffeeScript files with r.js - \"Unexpected Character\""},{"categories":["articles"],"contents":" Contents  * Auto generated table of contents {:toc}   Best friends together at last! So you want to create a javascript application with some kind of non trivial complexity, but separating the functionality out into different script files gets hairy. You need to forward declare certain functions before you execute certain functions, and things need to be loaded before they can be displayed.Â Then when you add CoffeeScript into the mix you've got a whole new set of problems. Ultimately you want one big file containing the logic of your application, but unless you've passed your discrete .coffee files to the coffee compilerÂ (or included them in the head of your html)Â in a specific order, you won't be able to execute functions before they've been declared.Â Oh no save me, RequireJS! What RequireJSÂ does in this situation is provide a solution to the dependency problem mentioned above. What you do is create your separate script files to the AMDÂ format, which tells you to explicitly mention the files (modules) that each script file depends upon. You do this by wrapping your script in a call to the function define, where the parameters passed to define reference the dependencies of your new script.\nBy returning from this define function, you decide what to expose from this module when it's requested by something else. This is similar to the exports.blah = ExportedObject format within CommonJS. If we manipulate exactly what is returned we can expose any number of class definitions, functions orÂ arbitraryÂ values that we choose.\nLet's Go Setup We're going to make a test project to understand how to make these things work together. This will give us an idea of how to structure our application in a way that removes the problems of dependency resolution. The first thing we'll need to do is to get the required libraries to run RequireJS with CoffeeScript. The specific files we need are as follows:\n The RequireJS library  http://requirejs.org/docs/download.html  The CoffeeScript plugin for RequireJS  https://raw.github.com/jrburke/require-cs/latest/cs.js  The latest coffee-script.js compiler (for use with the above plugin)  https://raw.github.com/jashkenas/coffee-script/master/extras/coffee-script.js   Next we'll create some folders for our application, and for the sake of this example we'll organise the above files that we've downloaded as follows.Â Our file layout on disk {: .notice }\nNext we'll create our html file for loading the scripts, this'll be nothing more than a standard html document with a script tag in the head to load the require.js library.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;RequireJS + Coffeescript\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;lib/require.js\u0026#34; data-main=\u0026#34;src/main\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Note the data-main attribute on the script tag. This is specific to RequireJS, and it defines the entry point to our application. What we're doing is telling RequireJS where the first file we want to execute is located, in this case it's at \u0026ldquo;src/main.js\u0026rdquo; (we've intentionally left out the .jsÂ suffix on this path).Â We could set this to be anywhere in the directory tree, but it's important that the coffee-script.js and cs.js files are located in the same place as the entry point. Also at this point we want to rename coffee-script.js to CoffeeScript.js. This is a requirement specific to the cs.js plugin.\nNow we'll create a simple main.js file for use in our application. We'll make sure it follows the AMD format by wrapping everything in a define call, and because we don't yet depend on anything it'll be straightforward.\ndefine([], function(){ console.log(\u0026#34;Running main.js!\u0026#34;); });  Our tree should now look like this:\n{: .notice }\nFrom here we can serve the files from the root of the project, and we should see our message output in the console for the index page.\nIt's humble, but that little message means we've almost configured everything correctly, and we can finally get down to writing the logic of our application. whoopty doo!\nThe application We'll create a simple test application in coffeescript. Let's make it simple and add some text to the dom when the user clicks on the page. We'll do it in three steps\n populate the dom with a super cool html button bind to a click event and write to the console bind to the same event and add some text to the page  For demonstrating how to organise an application, we'll also experiment with different ways of returning values from a module to show how we can expose different objects.\nAdding a button to the page We'll do this by creating a module which simply adds a standard button element to the page. We'll call into this module from our main.js module utilising the CoffeeScript plugin we have sitting nicely in the srcÂ folder.\ndefine [], () -\u0026gt; -\u0026gt; input = document.createElement \u0026#34;button\u0026#34; input.innerText = \u0026#34;Super Cool Test Button!\u0026#34; input.setAttribute \u0026#34;id\u0026#34;, \u0026#34;the-button\u0026#34; document.body.appendChild \u0026#34;input\u0026#34; As before, we've created a file that follows the AMD format. This is implemented via wrapping the entire module in a defineÂ call. The empty array is to say that this module depends on nothing, and the empty parameter list for the function reflects that we aren't passing any dependencies in.\nWhat's happening here is that within the define callÂ we are saying \u0026ldquo;here comes a module with no dependencies\u0026rdquo; - then within that function we are defining a single function which manipulates the dom to add a button to the document\ninput = document.createElement \u0026#34;button\u0026#34; input.innerText = \u0026#34;Super Cool Test Button!\u0026#34; input.setAttribute \u0026#34;id\u0026#34;, \u0026#34;the-button\u0026#34; document.body.appendChild \u0026#34;input\u0026#34; Because this is CoffeeScript, the last expression of a function is returned. In this case, the last expression within the define call is the definition the function above - the one that adds the button. This means that when we import this module elsewhere, all we are importing is the function above. Which we're going to do now!\ndefine([\u0026#34;cs!app/add_button\u0026#34;]), function (AddButton){ console.log(\u0026#34;Running main.js!\u0026#34;); AddButton(); });  In this case we've imported the module we just created and associated it with the parameter AddButton. Now within the context of main.js we have access to whatever we exported, which in this case was the single function we defined. By executing it directly we're performing the add button functionality.\nNice!\n","permalink":"https://donaldhutchison.info/blog/2012-04-24-coffeescript-requirejs-and-you/","tags":["coffeescript","requirejs","amd","web development"],"title":"Coffeescript RequireJS and You!"},{"categories":null,"contents":"inspired by thisÂ awesome nds tracker and an oldÂ boingboing post, i decided to make an implementation of conway's game of life in ruby, using the gosu and chingu game development gems.\nafter finding a way round the terrible deep cloning in ruby it was incredibly painless and very interesting. i like how the initial choice of cells influences whether you have a beautiful symmetrical oscillating pattern or a horrible cancerous mess, after 100 or so generations.\n ","permalink":"https://donaldhutchison.info/blog/2010-06-06-conways-game-of-life-in-ruby-gosu-chingu/","tags":["gamedev","programming","ruby"],"title":"Conway's Game of Life in Ruby (gosu + chingu)"},{"categories":["articles"],"contents":"OBBs (Oriented Bounding Boxes) allow for a greater degree of accuracy than their axis aligned counterparts in the field of collision detection. It turns out this is aÂ lotÂ simpler to implement in 2D than 3D.\nHere's my own take on it, which I hope to put to heavy use in an ongoing project. The OBB is modelled by an orientation matrix (in the form of two Vector2's because the Matrix type seems to suck), an origin and a Vector2 representing the +ve half widths in the x and y axis.\nThe object includes intersection methods and a crude draw method for debug purposes (you'll need to supply your own spritebatch and a 1x1 texture2d to use it)\nusing System; using System.Collections.Generic; using System.Linq; using System.Text; using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Graphics; using Extensions; namespace OBBTest { public class OBB { #region members and properties  Vector2 _origin;//centre point of the OBB  public Vector2 Origin { get { return _origin; } set { _origin = value; } } Vector2[] _axis;//2d orientation matrix  public Vector2[] Axis { get { return _axis; } } Vector2 _halfWidths;//the +ve extents along each axis  public Vector2 HalfWidths { get { return _halfWidths; } set { _halfWidths = value; } } float _angleInRadians;//used for drawing a visuaisation of the OBB  public float AngleInRadians { get { return _angleInRadians; } set { if (value \u0026lt; Math.PI \u0026amp;\u0026amp; value \u0026gt; -Math.PI) //in the range [-PI..PI]  UpdateAxis(value); if (value \u0026gt;= Math.PI) UpdateAxis((float)(Math.Abs((value % Math.PI * 2)) - Math.PI)); if (value \u0026lt;= -Math.PI) UpdateAxis((float)(Math.Abs((value % Math.PI * 2)) + Math.PI)); } } public Color DebugColor = Color.White; //an epsilon value to counter floating point errors in a parallel situation  const float EPSILON = 0.00001f; #endregion  /// \u0026lt;summary\u0026gt;  /// Creates an oriented bounding box for collision detection  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;Origin\u0026#34;\u0026gt;The center of the box\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;AngleInRadians\u0026#34;\u0026gt;The rotation of the box in the xy plane\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;HalfWidths\u0026#34;\u0026gt;The half extents of the box in it\u0026#39;s X and Y axis\u0026lt;/param\u0026gt;  public OBB(Vector2 Origin, float AngleInRadians, Vector2 HalfWidths) { _origin = Origin; _angleInRadians = AngleInRadians; _halfWidths = HalfWidths; _axis = new Vector2[2]; _axis[0] = new Vector2(); _axis[1] = new Vector2(); UpdateAxis(AngleInRadians); } /// \u0026lt;summary\u0026gt;  /// Returns whether this OBB is intersecting a second  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;OtherOBB\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt;  public bool Intersects(OBB OtherOBB) { return OBB.Intersects(this, OtherOBB); } /// \u0026lt;summary\u0026gt;  /// Finds where we would draw our debug texture without rotation.  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;returns\u0026gt;A rectangle corresponging to the unrotated position of the AABB\u0026lt;/returns\u0026gt;  private Rectangle GetDestinationRect() { int x = (int)( _origin.X ); int y = (int)(_origin.Y ); int width = (int)(_halfWidths.X*2); int height = (int)(_halfWidths.Y*2); return new Rectangle(x, y, width, height); } /// \u0026lt;summary\u0026gt;  /// Updates the orientation of the OBB  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;AngleInRadians\u0026#34;\u0026gt;The new rotation in radians\u0026lt;/param\u0026gt;  public void UpdateAxis(float AngleInRadians) { //Standard rotation matrix equation  _axis[0].X = (float) Math.Cos(AngleInRadians); _axis[0].Y = (float)Math.Sin(AngleInRadians); _axis[1].Y = (float)Math.Cos(AngleInRadians); _axis[1].X = -(float)Math.Sin(AngleInRadians); _angleInRadians = AngleInRadians; } /// \u0026lt;summary\u0026gt;  /// Prints the properties of the OBB to the console  /// \u0026lt;/summary\u0026gt;  public void Print() { Console.WriteLine(\u0026#34;origin : \u0026#34;+_origin+\u0026#34;\\nAngle : \u0026#34;+_angleInRadians+ \u0026#34;\\nX Axis : \u0026#34;+_axis[0]+\u0026#34;\\nY Axis : \u0026#34;+_axis[1]); } /// \u0026lt;summary\u0026gt;  /// Draws a visualisation of the OBB, useful for debug purposes  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;sb\u0026#34;\u0026gt;The spritebatch instance to draw with\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;NullTexture\u0026#34;\u0026gt;A reference to a 1x1 texture which will be draw over the OBB\u0026lt;/param\u0026gt;  public void Draw(Texture2D NullTexture,SpriteBatch sb) { //OBB\u0026#39;s are only ever going to be drawn in debug mode  //so performance from repeated Begin() End() calls is acceptable  sb.Begin(); Vector2 g = _halfWidths; g.Normalize(); sb.Draw(NullTexture, GetDestinationRect(), null, DebugColor, _angleInRadians, Vector2.One/2,//the origin of the 1x1 texture i.e. (0.5f,0.5f)  SpriteEffects.None, 1f); sb.End(); } /// \u0026lt;summary\u0026gt;  /// Tests whether two OBBs intersect. Uses a separating axis implementation.  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;First\u0026#34;\u0026gt;The first OBB\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;Second\u0026#34;\u0026gt;The second OBB\u0026lt;/param\u0026gt;  /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt;  public static bool Intersects(OBB First, OBB Second) { #region pre test calcs and declarations  float rf, rs; float[,] R = new float[2, 2]; float[,] AbsR = new float[2, 2]; //compuet rotation matrix by expressing second in terms of first  //also create common sub expressions  for (int i = 0; i \u0026lt; 2; i++) for (int j = 0; j \u0026lt; 2; j++) { R[i, j] = Vector2.Dot(First.Axis[i], Second.Axis[j]); AbsR[i, j] = Math.Abs(R[i, j]) + EPSILON; } //create translation vector  Vector2 translation = Second.Origin - First.Origin; //bring translation into First\u0026#39;s local coordinate system  translation = new Vector2(Vector2.Dot(translation, First.Axis[0]), Vector2.Dot(translation, First.Axis[1])); #endregion  //Test if axes FirstX or FirstY separate the OBBs  for (int i = 0; i \u0026lt; 2; i++ ) { rf = First.HalfWidths.Index(i); rs = Second.HalfWidths.X * AbsR[i,0] + Second.HalfWidths.Y * AbsR[i,1]; if(Math.Abs(translation.Index(i)) \u0026gt; (rf + rs)) return false; } //Test if axes SecondX or SecondY separate the OBBs  for (int i = 0; i \u0026lt; 2; i++) { rf = First.HalfWidths.Index(0) * AbsR[0, i] + First.HalfWidths.Index(1) * AbsR[1, i]; rs = Second.HalfWidths.Index(i); if(Math.Abs(translation.Index(0) * R[0,i] + translation.Index(1) * R[1,i]) \u0026gt; (rf + rs)) return false; } //no separating axis - OBBs must therefore be intersecting  return true; } } } namespace Extensions { /// \u0026lt;summary\u0026gt;  /// Adds the ability to index a Vector2 for cheeky code saving  /// \u0026lt;/summary\u0026gt;  public static class Vector2Extensions { public static float Index(this Vector2 v, int i) { switch(i) { case 0: return v.X; case 1: return v.Y; default: throw new IndexOutOfRangeException(); } } } }  ","permalink":"https://donaldhutchison.info/blog/2010-03-07-2d-obb-collisions-in-xna/","tags":["collisions","gamedev","programming","xna","C#"],"title":"2D OBB Collisions in XNA"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ] ","permalink":"https://donaldhutchison.info/search/","tags":null,"title":"Search Results"}]